// Generated by CoffeeScript 1.8.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

(function() {
  var CodeEditor;
  CodeEditor = (function(_super) {
    __extends(CodeEditor, _super);

    function CodeEditor() {
      return CodeEditor.__super__.constructor.apply(this, arguments);
    }

    CodeEditor.prototype.init = function(id) {
      var cancelButton, codeArea, confirmButton, enableCode, self;
      this.id = id;
      self = this;
      this.domElement = document.createElement('div');
      this.domElement.id = this.id;
      this.domElement.className = 'code-editor';
      codeArea = document.createElement('textarea');
      codeArea.className = 'code-area';
      enableCode = document.createElement('label');
      enableCode.className = 'enable-code-flag';
      enableCode.innerHTML = '<input type="checkbox" checked> Enable programing';
      cancelButton = document.createElement('button');
      cancelButton.className = 'cancel-button';
      cancelButton.innerText = 'Cancel';
      cancelButton.addEventListener('click', function(e) {
        return self.hide();
      });
      confirmButton = document.createElement('button');
      confirmButton.className = 'confirm-button';
      confirmButton.innerText = 'Save';
      confirmButton.addEventListener('click', function(e) {
        self.save();
        return self.hide();
      });
      this.domElement.appendChild(codeArea);
      this.domElement.appendChild(enableCode);
      this.domElement.appendChild(cancelButton);
      this.domElement.appendChild(confirmButton);
      this.domElement.codeAreaEl = codeArea;
      this.domElement.enableCodeEl = enableCode;
      this.domElement.cancelButtonEl = cancelButton;
      return this.domElement.confirmButtonEl = confirmButton;
    };

    CodeEditor.prototype.hide = function() {
      return this.domElement.className = 'code-editor';
    };

    CodeEditor.prototype.show = function(code, flag, callback) {
      this.domElement.codeAreaEl.value = code;
      this.domElement.className = 'code-editor show';
      this.domElement.enableCodeEl.firstChild.checked = flag === true;
      return this.callback = callback;
    };

    CodeEditor.prototype.save = function() {
      if (this.callback != null) {
        return this.callback(this.domElement.codeAreaEl.value, this.domElement.enableCodeEl.firstChild.checked);
      }
    };

    return CodeEditor;

  })(View);
  return this.CodeEditor = CodeEditor;
})();
