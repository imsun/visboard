// Generated by CoffeeScript 1.8.0
(function() {
  var Data;
  Data = (function() {
    Data.list = {};

    Data.tree = [];

    Data.getNode = function(name, trees) {
      var result, tree, _i, _j, _len, _len1;
      for (_i = 0, _len = trees.length; _i < _len; _i++) {
        tree = trees[_i];
        if (tree.name === name) {
          return tree;
        }
      }
      for (_j = 0, _len1 = trees.length; _j < _len1; _j++) {
        tree = trees[_j];
        result = Data.getNode(name, tree.children);
        if (result) {
          return result;
        }
      }
    };

    function Data(name, data, parent) {
      var dataNode, node;
      this.data = data;
      Data.list[name] = this.data;
      dataNode = {
        name: name,
        type: 'data',
        parent: parent,
        children: [],
        prop: {
          title: {
            name: 'Data',
            type: 'title'
          },
          name: {
            name: 'Name',
            type: 'label',
            value: name
          },
          rows: {
            name: 'Rows',
            type: 'label',
            value: this.data.length
          },
          preview: {
            name: 'Preview',
            type: 'html',
            value: (function() {
              var keys, table, th, tr;
              data = Data.list[name];
              keys = Object.keys(data[0]);
              tr = '';
              th = '<thead><tr><th>' + (keys.join('</th><th>')) + '</th></tr></thead>';
              data.forEach(function(row, i) {
                var td;
                td = '';
                keys.forEach(function(key, j) {
                  return td += "<td>" + row[key] + "</td>";
                });
                return tr += "<tr>" + td + "</tr>";
              });
              table = "<table>" + th + "<tbody>" + tr + "</tbody></table>";
              return table;
            })()
          }
        }
      };
      if (parent != null) {
        node = Data.getNode(parent, Data.tree);
        node.children.push(dataNode);
      } else {
        Data.tree.push(dataNode);
      }
      if (typeof DataPool !== "undefined" && DataPool !== null) {
        DataPool.display(_.copy(Data.tree));
      }
      if (typeof DataPanel !== "undefined" && DataPanel !== null) {
        DataPanel.display(dataNode);
      }
    }

    return Data;

  })();
  Data.Filter = (function() {
    _Class.counter = 0;

    function _Class() {
      var dataNode, name, self;
      self = this;
      name = 'filter ' + Data.Filter.counter++;
      dataNode = {
        id: _.cid(),
        name: name,
        type: 'filter',
        parent: null,
        children: [],
        prop: {
          title: {
            name: 'Filter',
            type: 'title'
          },
          name: {
            name: 'Name',
            type: 'label',
            value: name
          },
          input: {
            name: 'Input',
            type: 'select',
            value: null,
            set: function() {
              var key, result, value, _ref;
              result = [
                {
                  name: 'none',
                  value: null
                }
              ];
              _ref = Data.list;
              for (key in _ref) {
                value = _ref[key];
                result.push({
                  name: key,
                  value: key
                });
              }
              return result;
            },
            listener: function(value) {
              var index, oldParent, parent;
              if (value === 'null') {
                value = null;
              }
              if (dataNode.parent != null) {
                oldParent = Data.getNode(dataNode.parent, Data.tree).children;
              } else {
                oldParent = Data.tree;
              }
              index = oldParent.indexOf(dataNode);
              oldParent.splice(index, 1);
              dataNode.parent = value;
              dataNode.prop.input.value = value;
              if (value != null) {
                parent = Data.getNode(value, Data.tree).children;
              } else {
                parent = Data.tree;
              }
              parent.push(dataNode);
              return dataNode.update();
            }
          },
          select: {
            name: 'Select',
            type: 'text',
            value: null,
            listener: function(value) {
              if (value === 'null') {
                value = null;
              }
              dataNode.prop.select.value = value;
              return dataNode.update();
            }
          },
          rules: {
            name: 'Rules',
            type: 'text',
            value: null,
            listener: function(value) {
              dataNode.prop.rules.value = value;
              return dataNode.update();
            }
          }
        },
        update: function() {
          var child, i, input, inputName, output, rules, select, _i, _len, _ref;
          _ref = dataNode.children;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            delete Data.list[child.name];
          }
          dataNode.children = [];
          inputName = dataNode.prop.input.value;
          select = dataNode.prop.select.value;
          rules = dataNode.prop.rules.value;
          if (!select || !inputName) {
            DataPool.display(Data.tree);
            return;
          }
          input = Data.list[inputName];
          if (select !== '*') {
            select = select.split(',');
          }
          output = [];
          input.forEach(function(row, index) {
            var fn, result;
            if (rules) {
              fn = eval("(function ($data, $index) { return " + rules + "})");
              if (!fn(row, index)) {
                return;
              }
            }
            if (select === '*') {
              return output.push(_.copy(row));
            } else {
              result = {};
              select.forEach(function(key) {
                return result[key] = _.copy(row[key]);
              });
              return output.push(result);
            }
          });
          i = 0;
          while (Data.list[inputName + '.' + i]) {
            i++;
          }
          return new Data(inputName + '.' + i, output, dataNode.name);
        }
      };
      Data.tree.push(dataNode);
      if (typeof DataPool !== "undefined" && DataPool !== null) {
        DataPool.display(Data.tree);
      }
      if (typeof DataPanel !== "undefined" && DataPanel !== null) {
        DataPanel.display(dataNode);
      }
    }

    return _Class;

  })();
  Data.Cluster = (function() {
    _Class.counter = 0;

    function _Class() {
      var dataNode, name, self;
      self = this;
      name = 'cluster ' + Data.Cluster.counter++;
      dataNode = {
        id: _.cid(),
        name: name,
        type: 'cluster',
        parent: null,
        children: [],
        prop: {
          title: {
            name: 'Cluster',
            type: 'title'
          },
          name: {
            name: 'Name',
            type: 'label',
            value: name
          },
          input: {
            name: 'Input',
            type: 'select',
            value: null,
            set: function() {
              var key, result, value, _ref;
              result = [
                {
                  name: 'none',
                  value: null
                }
              ];
              _ref = Data.list;
              for (key in _ref) {
                value = _ref[key];
                result.push({
                  name: key,
                  value: key
                });
              }
              return result;
            },
            listener: function(value) {
              var index, oldParent, parent;
              if (value === 'null') {
                value = null;
              }
              if (dataNode.parent != null) {
                oldParent = Data.getNode(dataNode.parent, Data.tree).children;
              } else {
                oldParent = Data.tree;
              }
              index = oldParent.indexOf(dataNode);
              oldParent.splice(index, 1);
              dataNode.parent = value;
              dataNode.prop.input.value = value;
              if (value != null) {
                parent = Data.getNode(value, Data.tree).children;
              } else {
                parent = Data.tree;
              }
              parent.push(dataNode);
              return dataNode.update();
            }
          },
          key: {
            name: 'Key',
            type: 'text',
            value: null,
            listener: function(value) {
              if (value === 'null') {
                value = null;
              }
              dataNode.prop.key.value = value;
              return dataNode.update();
            }
          }
        },
        update: function() {
          var child, group, index, input, inputName, item, key, keys, _i, _len, _ref, _results;
          _ref = dataNode.children;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            delete Data.list[child.name];
          }
          dataNode.children = [];
          inputName = dataNode.prop.input.value;
          key = dataNode.prop.key.value;
          if (!key || !inputName) {
            DataPool.display(Data.tree);
            return;
          }
          input = Data.list[inputName];
          group = {};
          input.forEach(function(row, index) {
            if (!group[row[key]]) {
              group[row[key]] = [];
            }
            return group[row[key]].push(_.copy(row));
          });
          keys = Object.keys(group).map(function(row) {
            var temp;
            temp = {};
            temp[key] = row;
            return temp;
          });
          new Data(inputName + '.' + key, keys, dataNode.name);
          _results = [];
          for (index in group) {
            item = group[index];
            _results.push(new Data(inputName + '.' + key + '.' + index, item, dataNode.name));
          }
          return _results;
        }
      };
      Data.tree.push(dataNode);
      if (typeof DataPool !== "undefined" && DataPool !== null) {
        DataPool.display(Data.tree);
      }
      if (typeof DataPanel !== "undefined" && DataPanel !== null) {
        DataPanel.display(dataNode);
      }
    }

    return _Class;

  })();
  if (typeof exports !== "undefined" && exports !== null) {
    return module.exports = Data;
  } else {
    return this.Data = Data;
  }
})();
